/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* * {
  margin: 0;
  padding: 0;
  box-sizing: inherit;
}  */

// -----------SASS code----------
$color-grey-dark: #777;
$color-white: #fff;

$olor-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;
$color-black: #000;

*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* box-sizing: border-box; */
  box-sizing: inherit;
}

html {
  /* font-size: 10px; */
  /* converting into percentage, 10px/16*100 = 62.5%  */
  font-size: 62.5%;
}

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 1.6rem; */
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem;
  box-sizing: border-box;
}

.header {
  height: 95vh;
  /* background-color: aquamarine; */

  // In CSS hexadecimal value cannot be put in rgba function , in opacity does not work.
  background-image: linear-gradient(
      to right bottom,
      rgba($color-primary-light, 0.8),
      rgba($color-primary-dark, 0.8)
    ),
    url(../img/hero.jpg);
  background-size: cover;
  background-position: top;

  /* 75vh - changes dynamically  */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clip-path: polygon(0% 20%, 60% 20%, 60% 0%, 100% 50%, 60% 100%, 60% 80%, 0% 80%); */
  position: relative;

  &__logo-box {
    /* make parent container 'relative' to apply the position   */
    position: absolute;
    top: 4rem;
    left: 4rem;
  }

  &__logo {
    height: 3.5rem;
  }

  &__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }
}

// .header__logo-box {
//   /* make parent container 'relative' to apply the position   */
//   position: absolute;
//   top: 4rem;
//   left: 4rem;
// }

// .header__logo {
//   height: 3.5rem;
// }

/* .logo:hover{
  animation: moveInRight 1s ease-in;
} */

// .header__text-box {
//   position: absolute;
//   top: 40%;
//   left: 50%;
//   transform: translate(-50%, -50%);
//   text-align: center;
// }

.heading-primary {
  color: $color-white;
  text-transform: uppercase;

  /* for animation moving up and down -unstability */
  backface-visibility: hidden;
  margin-bottom: 6rem;
  /* transition:  0.5s ease-in-out; */
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /* ANIMATION PROPERTIES */
  animation: moveInLeft;
  animation-duration: 1s;
  /* animation-delay: 1s; */
  /* animation-iteration-count: 2; */
  animation-timing-function: ease-out;
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;

  /* animation-name: moveInRight; */
  /* animation-duration: 1s; */
  /* animation-delay: 1s; */
  /* animation-iteration-count: 2; */
  /* animation-timing-function: ease-out; */
  animation: moveInRight 1s ease-out;
}

/* animation:
1. by transition
2. keyframes 
  -> opacity
  ->transform
 */

/* animation name is "moveInLeft" */
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }
  80% {
    /* color: red; */
    transform: translateX(1rem);
  }
  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* animation name is "moveInLeft" */
@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }
  80% {
    /* color: red; */
    transform: translateX(-1rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

/* Animation for button on loading page - to slowly move from bottom to upwards  */

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translatey(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  border-radius: 10rem;
  display: inline-block;
  transition: all 0.2s;

  /* since .btn::after is absolute  */
  position: relative;
  font-size: 1.6rem;
}

.btn--animated {
  animation: moveInBottom 0.75s ease-out 0.5s;
  /* backwards:  applies first animation 0% for 0.75s and then applies other animation  */
  animation-fill-mode: backwards;
}

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 10px 20px rgba($color-black, 0.2);
}

/* when we click button/link it is called 'active' state */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
}

.btn--white {
  background-color: $color-white;
  color: $color-grey-dark;
}

.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  /* absolute position should have reference form parent as relative, here .btn is the parent  */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

.btn--white::after {
  background-color: $color-white;
  /* background-color: red; */
}

.btn:hover::after {
  /* Add transition in .btn::after  */
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}
